From 77a670bbfa0af30338b31094a77599af549c68a5 Mon Sep 17 00:00:00 2001
From: Ignacio Casal Quinteiro <qignacio@amazon.com>
Date: Thu, 11 May 2017 17:51:56 +0200
Subject: [PATCH] Revert "GSocket: Fix race conditions on Win32 if multiple
 threads are waiting on conditions for the same socket"

This reverts commit 799f8dcd46fb40ea206d9f1b5468db62cc00a72e.
This patch seems to break applications that use GTask specific
operations with GSocket. We will need to investigate a bit more
on this issue but for now we revert it and leave it for the
next major release.
---
 gio/gsocket.c | 94 +++++++++++++++++------------------------------------------
 1 file changed, 26 insertions(+), 68 deletions(-)

diff --git a/gio/gsocket.c b/gio/gsocket.c
index b4a941e..3a9c0cd 100644
--- a/gio/gsocket.c
+++ b/gio/gsocket.c
@@ -257,14 +257,11 @@ struct _GSocketPrivate
   guint           connect_pending : 1;
 #ifdef G_OS_WIN32
   WSAEVENT        event;
-  gboolean        waiting;
-  DWORD           waiting_result;
   int             current_events;
   int             current_errors;
   int             selected_events;
   GList          *requested_conditions; /* list of requested GIOCondition * */
   GMutex          win32_source_lock;
-  GCond           win32_source_cond;
 #endif
 
   struct {
@@ -351,10 +348,8 @@ socket_strerror (int err)
 static void
 _win32_unset_event_mask (GSocket *socket, int mask)
 {
-  g_mutex_lock (&socket->priv->win32_source_lock);
   socket->priv->current_events &= ~mask;
   socket->priv->current_errors &= ~mask;
-  g_mutex_unlock (&socket->priv->win32_source_lock);
 }
 #else
 #define win32_unset_event_mask(_socket, _mask)
@@ -855,7 +850,6 @@ g_socket_finalize (GObject *object)
 
   g_assert (socket->priv->requested_conditions == NULL);
   g_mutex_clear (&socket->priv->win32_source_lock);
-  g_cond_clear (&socket->priv->win32_source_cond);
 #endif
 
   for (i = 0; i < RECV_ADDR_CACHE_SIZE; i++)
@@ -1083,7 +1077,6 @@ g_socket_init (GSocket *socket)
 #ifdef G_OS_WIN32
   socket->priv->event = WSA_INVALID_EVENT;
   g_mutex_init (&socket->priv->win32_source_lock);
-  g_cond_init (&socket->priv->win32_source_cond);
 #endif
 }
 
@@ -2711,8 +2704,6 @@ g_socket_accept (GSocket       *socket,
 
   while (TRUE)
     {
-      win32_unset_event_mask (socket, FD_ACCEPT);
-
       if ((ret = accept (socket->priv->fd, NULL, 0)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -2727,6 +2718,8 @@ g_socket_accept (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_ACCEPT);
+
               if (socket->priv->blocking)
                 {
                   if (!g_socket_condition_wait (socket,
@@ -2743,6 +2736,8 @@ g_socket_accept (GSocket       *socket,
       break;
     }
 
+  win32_unset_event_mask (socket, FD_ACCEPT);
+
 #ifdef G_OS_WIN32
   {
     /* The socket inherits the accepting sockets event mask and even object,
@@ -2834,8 +2829,6 @@ g_socket_connect (GSocket         *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_CONNECT);
-
       if (connect (socket->priv->fd, &buffer.sa,
 		   g_socket_address_get_native_size (address)) < 0)
 	{
@@ -2850,6 +2843,8 @@ g_socket_connect (GSocket         *socket,
 	  if (errsv == WSAEWOULDBLOCK)
 #endif
 	    {
+              win32_unset_event_mask (socket, FD_CONNECT);
+
 	      if (socket->priv->blocking)
 		{
 		  if (g_socket_condition_wait (socket, G_IO_OUT, cancellable, error))
@@ -2875,6 +2870,8 @@ g_socket_connect (GSocket         *socket,
       break;
     }
 
+  win32_unset_event_mask (socket, FD_CONNECT);
+
   socket->priv->connected_read = TRUE;
   socket->priv->connected_write = TRUE;
 
@@ -3054,8 +3051,6 @@ g_socket_receive_with_timeout (GSocket       *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_READ);
-
       if ((ret = recv (socket->priv->fd, buffer, size, 0)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -3070,6 +3065,8 @@ g_socket_receive_with_timeout (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_READ);
+
               if (timeout != 0)
                 {
                   if (!block_on_timeout (socket, G_IO_IN, timeout, start_time,
@@ -3080,10 +3077,14 @@ g_socket_receive_with_timeout (GSocket       *socket,
                 }
             }
 
+	  win32_unset_event_mask (socket, FD_READ);
+
 	  socket_set_error_lazy (error, errsv, _("Error receiving data: %s"));
 	  return -1;
 	}
 
+      win32_unset_event_mask (socket, FD_READ);
+
       break;
     }
 
@@ -3249,8 +3250,6 @@ g_socket_send_with_timeout (GSocket       *socket,
 
   while (1)
     {
-      win32_unset_event_mask (socket, FD_WRITE);
-
       if ((ret = send (socket->priv->fd, buffer, size, G_SOCKET_DEFAULT_SEND_FLAGS)) < 0)
 	{
 	  int errsv = get_socket_errno ();
@@ -3265,6 +3264,8 @@ g_socket_send_with_timeout (GSocket       *socket,
               errsv == EAGAIN)
 #endif
             {
+              win32_unset_event_mask (socket, FD_WRITE);
+
               if (timeout != 0)
                 {
                   if (!block_on_timeout (socket, G_IO_OUT, timeout, start_time,
@@ -3679,7 +3680,7 @@ remove_condition_watch (GSocket      *socket,
 }
 
 static GIOCondition
-update_condition_unlocked (GSocket *socket)
+update_condition (GSocket *socket)
 {
   WSANETWORKEVENTS events;
   GIOCondition condition;
@@ -3746,16 +3747,6 @@ update_condition_unlocked (GSocket *socket)
 
   return condition;
 }
-
-static GIOCondition
-update_condition (GSocket *socket)
-{
-  GIOCondition res;
-  g_mutex_lock (&socket->priv->win32_source_lock);
-  res = update_condition_unlocked (socket);
-  g_mutex_unlock (&socket->priv->win32_source_lock);
-  return res;
-}
 #endif
 
 typedef struct {
@@ -4176,44 +4167,11 @@ g_socket_condition_timed_wait (GSocket       *socket,
     if (timeout == -1)
       timeout = WSA_INFINITE;
 
-    g_mutex_lock (&socket->priv->win32_source_lock);
-    current_condition = update_condition_unlocked (socket);
+    current_condition = update_condition (socket);
     while ((condition & current_condition) == 0)
       {
-        if (!socket->priv->waiting)
-          {
-            socket->priv->waiting = TRUE;
-            socket->priv->waiting_result = 0;
-            g_mutex_unlock (&socket->priv->win32_source_lock);
-
-            res = WSAWaitForMultipleEvents (num_events, events, FALSE, timeout, FALSE);
-
-            g_mutex_lock (&socket->priv->win32_source_lock);
-            socket->priv->waiting = FALSE;
-            socket->priv->waiting_result = res;
-            g_cond_broadcast (&socket->priv->win32_source_cond);
-          }
-        else
-          {
-            if (timeout != WSA_INFINITE)
-              {
-                if (!g_cond_wait_until (&socket->priv->win32_source_cond, &socket->priv->win32_source_lock, timeout))
-                  {
-                    res = WSA_WAIT_TIMEOUT;
-                    break;
-                  }
-                else
-                  {
-                    res = socket->priv->waiting_result;
-                  }
-              }
-            else
-              {
-                g_cond_wait (&socket->priv->win32_source_cond, &socket->priv->win32_source_lock);
-                res = socket->priv->waiting_result;
-              }
-          }
-
+	res = WSAWaitForMultipleEvents (num_events, events,
+					FALSE, timeout, FALSE);
 	if (res == WSA_WAIT_FAILED)
 	  {
 	    int errsv = get_socket_errno ();
@@ -4234,7 +4192,7 @@ g_socket_condition_timed_wait (GSocket       *socket,
 	if (g_cancellable_set_error_if_cancelled (cancellable, error))
 	  break;
 
-        current_condition = update_condition_unlocked (socket);
+	current_condition = update_condition (socket);
 
 	if (timeout != WSA_INFINITE)
 	  {
@@ -4243,7 +4201,6 @@ g_socket_condition_timed_wait (GSocket       *socket,
 	      timeout = 0;
 	  }
       }
-    g_mutex_unlock (&socket->priv->win32_source_lock);
     remove_condition_watch (socket, &condition);
     if (num_events > 1)
       g_cancellable_release_fd (cancellable);
@@ -4741,8 +4698,6 @@ g_socket_send_message_with_timeout (GSocket                *socket,
 
     while (1)
       {
-        win32_unset_event_mask (socket, FD_WRITE);
-
 	if (address)
 	  result = WSASendTo (socket->priv->fd,
 			      bufs, num_vectors,
@@ -4764,6 +4719,8 @@ g_socket_send_message_with_timeout (GSocket                *socket,
 
 	    if (errsv == WSAEWOULDBLOCK)
               {
+                win32_unset_event_mask (socket, FD_WRITE);
+
                 if (timeout != 0)
                   {
                     if (!block_on_timeout (socket, G_IO_OUT, timeout,
@@ -5211,8 +5168,6 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
     /* do it */
     while (1)
       {
-        win32_unset_event_mask (socket, FD_READ);
-
 	addrlen = sizeof addr;
 	if (address)
 	  result = WSARecvFrom (socket->priv->fd,
@@ -5234,6 +5189,8 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
 
             if (errsv == WSAEWOULDBLOCK)
               {
+                win32_unset_event_mask (socket, FD_READ);
+
                 if (timeout != 0)
                   {
                     if (!block_on_timeout (socket, G_IO_IN, timeout,
@@ -5247,6 +5204,7 @@ g_socket_receive_message_with_timeout (GSocket                 *socket,
 	    socket_set_error_lazy (error, errsv, _("Error receiving message: %s"));
 	    return -1;
 	  }
+	win32_unset_event_mask (socket, FD_READ);
 	break;
       }
 
-- 
2.7.4

