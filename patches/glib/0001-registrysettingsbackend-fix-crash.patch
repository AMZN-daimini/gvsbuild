From f9ded5e7cd3d51ec6b3e86569f114f1e1db9a105 Mon Sep 17 00:00:00 2001
From: Kunjan Naik <kunjnaik@amazon.com>
Date: Wed, 25 Aug 2021 09:35:22 +0200
Subject: [PATCH] registrysettingsbackend: fix crash

watch_add_notify gets the GNode with cache_lock but then drops the cache_lock
and acquires message_lock. Before that thread can acquire the message_lock
another thread can come in and do a watch_remove_notify and remove the
same prefix causing the GNode that was returned to thread 1 to be stale/bad.

Thread1 would then set the watch->message.watch.cache_node = cache_node;
 when it sends it's notifications.

This leads to the assert log and subsequently a corruption downstream
---
 gio/gregistrysettingsbackend.c | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/gio/gregistrysettingsbackend.c b/gio/gregistrysettingsbackend.c
index bae066a0a..24382f71c 100644
--- a/gio/gregistrysettingsbackend.c
+++ b/gio/gregistrysettingsbackend.c
@@ -1930,12 +1930,14 @@ watch_add_notify (GRegistryBackend *self,
   /* Duplicate tree into the cache in the main thread, before we add the notify: if we do it in the
    * thread we can miss changes while we are caching.
    */
+  EnterCriticalSection (watch->message_lock);
   EnterCriticalSection (self->cache_lock);
   cache_node = registry_cache_get_node_for_key (self->cache_root, gsettings_prefix, TRUE);
 
   if (cache_node == NULL || cache_node->data == NULL)
     {
       LeaveCriticalSection (self->cache_lock);
+      LeaveCriticalSection (watch->message_lock);
       g_warn_if_reached ();
       return FALSE;
     }
@@ -1948,6 +1950,7 @@ watch_add_notify (GRegistryBackend *self,
       trace ("watch_add_notify: prefix %s already watched, %i subscribers.\n",
              gsettings_prefix, cache_item->subscription_count);
       LeaveCriticalSection (self->cache_lock);
+      LeaveCriticalSection (watch->message_lock);
       return FALSE;
     }
 
@@ -1956,7 +1959,6 @@ watch_add_notify (GRegistryBackend *self,
   //registry_cache_dump (self->cache_root, NULL);
   LeaveCriticalSection (self->cache_lock);
 
-  EnterCriticalSection (watch->message_lock);
   watch->message.type = WATCH_THREAD_ADD_WATCH;
   watch->message.watch.event = event;
   watch->message.watch.hpath = hpath;
-- 
2.17.1

